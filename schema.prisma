// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource mysql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "mysql"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                            String           @id @default(uuid())
  name                          String           @default("")
  email                         String           @unique @default("")
  password                      String
  role                          String?          @default("Student")
  isAdmin                       Boolean          @default(true)
  createdAt                     DateTime?        @default(now())
  isActive                      Boolean          @default(false)
  lastLoginDate                 DateTime?        @default(now())
  activityLogs                  ActivityLog[]    @relation("ActivityLog_updatedBy")
  projects                      Project?         @relation("User_projects", fields: [projectsId], references: [id])
  projectsId                    String?          @map("projects")
  customPermissions             Permission[]     @relation("Permission_users")
  userPermissions               UserPermission[] @relation("UserPermission_user")
  from_UserLog_user             UserLog[]        @relation("UserLog_user")
  from_UserPermission_grantedBy UserPermission[] @relation("UserPermission_grantedBy")

  @@index([projectsId])
}

model UserLog {
  id        String    @id @default(uuid())
  user      User?     @relation("UserLog_user", fields: [userId], references: [id])
  userId    String?   @map("user")
  operation String    @default("")
  before    Json?
  after     Json?
  timestamp DateTime? @default(now())

  @@index([userId])
}

model Project {
  id                      String       @id @default(uuid())
  name                    String       @default("")
  createdAt               DateTime?    @default(now())
  project                 String       @default("")
  isActive                Boolean      @default(false)
  lastUpdate              DateTime?    @default(now())
  members                 User[]       @relation("User_projects")
  milestones              Milestone[]  @relation("Milestone_project")
  from_ProjectLog_project ProjectLog[] @relation("ProjectLog_project")
}

model ProjectLog {
  id        String    @id @default(uuid())
  project   Project?  @relation("ProjectLog_project", fields: [projectId], references: [id])
  projectId String?   @map("project")
  operation String    @default("")
  before    Json?
  after     Json?
  timestamp DateTime? @default(now())

  @@index([projectId])
}

model Milestone {
  id            String    @id @default(uuid())
  project       Project?  @relation("Milestone_project", fields: [projectId], references: [id])
  projectId     String?   @map("project")
  milestoneName String    @default("")
  status        String    @default("not_started")
  assignee      String    @default("")
  createdAt     DateTime? @default(now())

  @@index([projectId])
  @@index([status])
}

model ActivityLog {
  id          String    @id @default(uuid())
  oldStatus   String    @default("")
  newStatus   String    @default("")
  timestamp   DateTime? @default(now())
  projectId   String    @default("")
  milestoneId String    @default("")
  updatedBy   User?     @relation("ActivityLog_updatedBy", fields: [updatedById], references: [id])
  updatedById String?   @map("updatedBy")

  @@index([projectId])
  @@index([milestoneId])
  @@index([updatedById])
}

model Permission {
  id          String @id @default(uuid())
  name        String @unique @default("")
  description String @default("")
  category    String
  roles       Json   @default("[]")
  users       User[] @relation("Permission_users")
}

model UserPermission {
  id          String    @id @default(uuid())
  user        User?     @relation("UserPermission_user", fields: [userId], references: [id])
  userId      String?   @map("user")
  permission  String
  granted     String    @default("allow")
  grantedBy   User?     @relation("UserPermission_grantedBy", fields: [grantedById], references: [id])
  grantedById String?   @map("grantedBy")
  grantedAt   DateTime? @default(now())

  @@index([userId])
  @@index([grantedById])
}
