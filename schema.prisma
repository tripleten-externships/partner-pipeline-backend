// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource mysql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "mysql"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                             String              @id @default(uuid())
  name                           String              @default("")
  email                          String              @unique @default("")
  password                       String
  role                           String?             @default("Student")
  reminder_count                 Int?                @default(0)
  status                         String?             @default("Active")
  isAdmin                        Boolean             @default(true)
  createdAt                      DateTime?           @default(now())
  project                        String              @default("")
  isActive                       Boolean             @default(false)
  lastLoginDate                  DateTime?           @default(now())
  activityLogs                   ActivityLog[]       @relation("ActivityLog_updatedBy")
  projects                       Project?            @relation("User_projects", fields: [projectsId], references: [id])
  projectsId                     String?             @map("projects")
  invitation                     ProjectInvitation[] @relation("ProjectInvitation_user")
  from_UserLog_user              UserLog[]           @relation("UserLog_user")
  from_Milestone_updatedBy       Milestone[]         @relation("Milestone_updatedBy")
  from_InvitationToken_createdBy InvitationToken[]   @relation("InvitationToken_createdBy")

  @@index([projectsId])
}

model UserLog {
  id        String    @id @default(uuid())
  user      User?     @relation("UserLog_user", fields: [userId], references: [id])
  userId    String?   @map("user")
  operation String    @default("")
  before    Json?
  after     Json?
  timestamp DateTime? @default(now())

  @@index([userId])
}

model Project {
  id                      String              @id @default(uuid())
  name                    String              @default("")
  createdAt               DateTime?           @default(now())
  project                 String              @default("")
  isActive                Boolean             @default(false)
  lastUpdate              DateTime?           @default(now())
  members                 User[]              @relation("User_projects")
  invitation              ProjectInvitation[] @relation("ProjectInvitation_project")
  milestones              Milestone[]         @relation("Milestone_project")
  activityLogs            ActivityLog[]       @relation("ActivityLog_project")
  from_ProjectLog_project ProjectLog[]        @relation("ProjectLog_project")
}

model ProjectLog {
  id        String    @id @default(uuid())
  project   Project?  @relation("ProjectLog_project", fields: [projectId], references: [id])
  projectId String?   @map("project")
  operation String    @default("")
  before    Json?
  after     Json?
  timestamp DateTime? @default(now())

  @@index([projectId])
}

model ProjectInvitation {
  id               String            @id @default(uuid())
  email            String            @default("")
  project          Project?          @relation("ProjectInvitation_project", fields: [projectId], references: [id])
  projectId        String?           @map("project")
  user             User?             @relation("ProjectInvitation_user", fields: [userId], references: [id])
  userId           String?           @map("user")
  invitationTokens InvitationToken[] @relation("InvitationToken_project")

  @@index([projectId])
  @@index([userId])
}

model Milestone {
  id            String        @id @default(uuid())
  project       Project?      @relation("Milestone_project", fields: [projectId], references: [id])
  projectId     String?       @map("project")
  activityLogs  ActivityLog[] @relation("ActivityLog_milestone")
  milestoneName String        @default("")
  status        String        @default("not_started")
  assignee      String        @default("")
  createdAt     DateTime?     @default(now())
  updatedAt     DateTime?     @default(now()) @updatedAt
  updatedBy     User?         @relation("Milestone_updatedBy", fields: [updatedById], references: [id])
  updatedById   String?       @map("updatedBy")

  @@index([projectId])
  @@index([status])
  @@index([updatedById])
}

model ActivityLog {
  id          String     @id @default(uuid())
  project     Project?   @relation("ActivityLog_project", fields: [projectId], references: [id])
  projectId   String?    @map("project")
  milestone   Milestone? @relation("ActivityLog_milestone", fields: [milestoneId], references: [id])
  milestoneId String?    @map("milestone")
  updatedBy   User?      @relation("ActivityLog_updatedBy", fields: [updatedById], references: [id])
  updatedById String?    @map("updatedBy")
  oldStatus   String?
  newStatus   String?
  timestamp   DateTime?  @default(now())

  @@index([projectId])
  @@index([milestoneId])
  @@index([updatedById])
}

model InvitationToken {
  id          String             @id @default(uuid())
  tokenHash   String             @unique @default("")
  project     ProjectInvitation? @relation("InvitationToken_project", fields: [projectId], references: [id])
  projectId   String?            @map("project")
  roleToGrant String?            @default("Student")
  expiresAt   DateTime
  maxUses     Int?               @default(1)
  usedCount   Int?               @default(0)
  revoked     Boolean            @default(false)
  createdBy   User?              @relation("InvitationToken_createdBy", fields: [createdById], references: [id])
  createdById String?            @map("createdBy")
  notes       String             @default("")

  @@index([projectId])
  @@index([createdById])
}

model InvitationTokenLog {
  id        String    @id @default(uuid())
  operation String    @default("")
  before    Json?
  after     Json?
  timestamp DateTime? @default(now())
}

model WaitlistEntry {
  id        String    @id @default(uuid())
  name      String    @default("")
  email     String    @unique @default("")
  status    String?   @default("pending")
  createdAt DateTime? @default(now())
}
